"""
Visualization tool for probabilistic plant structures generated by the hierarchical model.
Creates graphics showing all probable plant structures with opacity based on existence probabilities.
"""

import torch
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Circle
import matplotlib.patches as mpatches
from normal_hier_surrogate_nn import HierarchicalPlantSurrogateNet
from utils_nn import build_random_parameter_file

# Configuration: Path to trained model
MODEL_PATH = "Normal Data/surrogate_model.pt"

def visualize_probabilistic_plant_structure(model, params, day=25, figsize=(12, 10), 
                                          min_opacity=0.1, max_opacity=0.9, 
                                          bp_color='red', ep_color='blue',
                                          point_size=50, save_path=None):
    """
    Visualize probabilistic plant structures with opacity based on existence probabilities.
    
    Args:
        model: Trained HierarchicalPlantSurrogateNet
        params: L-system parameters (13-dimensional vector)
        day: Which growth day to visualize (0-25)
        figsize: Figure size tuple
        min_opacity: Minimum opacity for visualization
        max_opacity: Maximum opacity for high-probability points
        bp_color: Color for branch points
        ep_color: Color for end points
        point_size: Size of points in scatter plot
        save_path: Optional path to save the figure
    """
    
    model.eval()
    with torch.no_grad():
        # Prepare input
        params_tensor = torch.tensor(params, dtype=torch.float32).unsqueeze(0)
        params_norm = (params_tensor - model.input_mean) / (model.input_std + 1e-8)
        
        # Generate base plant structure
        bp_coords, bp_probs, ep_coords, ep_probs = model.structure_gen(params_norm)
        
        # Apply growth scaling for specific day
        growth_rate = np.log(10) / 25
        temporal_scale = 0.1 * np.exp(growth_rate * day)
        
        # Scale coordinates for the specified day
        bp_coords_day = bp_coords * temporal_scale
        ep_coords_day = ep_coords * temporal_scale
        
        # Convert to numpy for visualization
        bp_x = bp_coords_day[0, :, 0].cpu().numpy()
        bp_y = bp_coords_day[0, :, 1].cpu().numpy()
        bp_prob = bp_probs[0, :].cpu().numpy()
        
        ep_x = ep_coords_day[0, :, 0].cpu().numpy()
        ep_y = ep_coords_day[0, :, 1].cpu().numpy()
        ep_prob = ep_probs[0, :].cpu().numpy()
        
    # Create the visualization
    fig, ax = plt.subplots(figsize=figsize)
    
    # Scale probabilities to opacity range
    bp_opacity = min_opacity + (max_opacity - min_opacity) * bp_prob
    ep_opacity = min_opacity + (max_opacity - min_opacity) * ep_prob
    
    # Plot branch points with probability-based opacity (small circles only)
    for i in range(len(bp_x)):
        if bp_prob[i] > 0.01:  # Only show points with reasonable probability
            ax.scatter(bp_x[i], bp_y[i], c=bp_color, s=20, 
                      alpha=bp_opacity[i], marker='o', edgecolors='none')
    
    # Plot end points with probability-based opacity (small circles only)
    for i in range(len(ep_x)):
        if ep_prob[i] > 0.01:  # Only show points with reasonable probability
            ax.scatter(ep_x[i], ep_y[i], c=ep_color, s=20, 
                      alpha=ep_opacity[i], marker='o', edgecolors='none')
    
    # Customize the plot
    ax.set_xlim(0, 500 * temporal_scale)
    ax.set_ylim(0, 500 * temporal_scale)
    ax.set_xlabel('X Coordinate (pixels)', fontsize=12)
    ax.set_ylabel('Y Coordinate (pixels)', fontsize=12)
    ax.set_title(f'Probabilistic Plant Structure - Day {day}\n'
                f'Growth Scale: {temporal_scale:.2f}x, Opacity ∝ Existence Probability', 
                fontsize=14, fontweight='bold')
    
    # Add legend
    bp_legend = mpatches.Patch(color=bp_color, label='Branch Points')
    ep_legend = mpatches.Patch(color=ep_color, label='End Points')
    ax.legend(handles=[bp_legend, ep_legend], loc='upper right')
    
    # Add probability scale reference
    prob_text = (f"Opacity Scale:\n"
                f"Min: {min_opacity:.1f} (low probability)\n"
                f"Max: {max_opacity:.1f} (high probability)")
    ax.text(0.02, 0.98, prob_text, transform=ax.transAxes, 
           verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
    
    # Add statistics
    stats_text = (f"Branch Points: {np.sum(bp_prob > 0.1):.0f} visible\n"
                 f"End Points: {np.sum(ep_prob > 0.1):.0f} visible\n"
                 f"Avg BP Prob: {np.mean(bp_prob):.3f}\n"
                 f"Avg EP Prob: {np.mean(ep_prob):.3f}")
    ax.text(0.98, 0.02, stats_text, transform=ax.transAxes, 
           verticalalignment='bottom', horizontalalignment='right',
           bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"Visualization saved to {save_path}")
    
    plt.show()
    
    return fig, ax

def create_comprehensive_plant_visualization(model, params, days=[0, 5, 10, 15, 20, 25], 
                                          figsize=(18, 12), save_path=None):
    """
    Create a 6-panel visualization showing plant growth stages.
    Uses consistent scaling to show actual plant growth progression.
    """
    
    model.eval()
    with torch.no_grad():
        # Prepare input
        params_tensor = torch.tensor(params, dtype=torch.float32).unsqueeze(0)
        params_norm = (params_tensor - model.input_mean) / (model.input_std + 1e-8)
        
        # Generate base plant structure
        bp_coords, bp_probs, ep_coords, ep_probs = model.structure_gen(params_norm)
    
    # Calculate consistent scale (use max day for consistent viewing area)
    growth_rate = np.log(10) / 25
    max_temporal_scale = 0.1 * np.exp(growth_rate * max(days))
    max_coord = 500 * max_temporal_scale
    
    # Create 2x3 subplot grid
    fig, axes = plt.subplots(2, 3, figsize=figsize)
    axes = axes.flatten()
    
    # Create growth sequence subplots
    for idx, day in enumerate(days):
        ax = axes[idx]
        
        # Calculate growth scale for this day
        temporal_scale = 0.1 * np.exp(growth_rate * day)
        
        # Scale coordinates
        bp_coords_day = bp_coords * temporal_scale
        ep_coords_day = ep_coords * temporal_scale
        
        # Convert to numpy
        bp_x = bp_coords_day[0, :, 0].cpu().numpy()
        bp_y = bp_coords_day[0, :, 1].cpu().numpy()
        bp_prob = bp_probs[0, :].cpu().numpy()
        
        ep_x = ep_coords_day[0, :, 0].cpu().numpy()
        ep_y = ep_coords_day[0, :, 1].cpu().numpy()
        ep_prob = ep_probs[0, :].cpu().numpy()
        
        # Plot with probability-based opacity
        bp_opacity = 0.2 + 0.8 * bp_prob
        ep_opacity = 0.2 + 0.8 * ep_prob
        
        # Plot points (small circles only) - no connections to keep visualization clean
        for i in range(len(bp_x)):
            if bp_prob[i] > 0.05:
                ax.scatter(bp_x[i], bp_y[i], c='red', s=15, 
                          alpha=bp_opacity[i], marker='o', edgecolors='none')
        
        for i in range(len(ep_x)):
            if ep_prob[i] > 0.05:
                ax.scatter(ep_x[i], ep_y[i], c='blue', s=15, 
                          alpha=ep_opacity[i], marker='o', edgecolors='none')
        
        # Use consistent scale for all subplots to show growth
        ax.set_xlim(0, max_coord)
        ax.set_ylim(0, max_coord)
        ax.set_title(f'Day {day} - Growth Scale: {temporal_scale:.2f}x', 
                    fontweight='bold', fontsize=12)
        ax.grid(True, alpha=0.3)
        
        # Add axis labels
        if idx >= 3:  # Bottom row
            ax.set_xlabel('X Coordinate (pixels)', fontsize=10)
        if idx % 3 == 0:  # Left column
            ax.set_ylabel('Y Coordinate (pixels)', fontsize=10)
    
    # Add overall title
    fig.suptitle('Probabilistic Plant Growth Sequence\nOpacity ∝ Existence Probability | Consistent Scale Shows Growth Progression', 
                fontsize=16, fontweight='bold', y=0.96)
    
    # Add legend
    legend_elements = [
        mpatches.Patch(color='red', alpha=0.7, label='Branch Points'),
        mpatches.Patch(color='blue', alpha=0.7, label='End Points')
    ]
    
    # Place legend at the bottom center
    fig.legend(handles=legend_elements, loc='lower center', 
              bbox_to_anchor=(0.5, 0.02), ncol=3, fontsize=11)
    
    # Add statistics text box
    visible_bp = np.sum(bp_probs[0, :].cpu().numpy() > 0.1)
    visible_ep = np.sum(ep_probs[0, :].cpu().numpy() > 0.1)
    avg_bp_prob = np.mean(bp_probs[0, :].cpu().numpy())
    avg_ep_prob = np.mean(ep_probs[0, :].cpu().numpy())
    
    stats_text = (f"Structure Statistics:\n"
                 f"Visible Branch Points: {visible_bp:.0f}\n"
                 f"Visible End Points: {visible_ep:.0f}\n"
                 f"Avg BP Probability: {avg_bp_prob:.3f}\n"
                 f"Avg EP Probability: {avg_ep_prob:.3f}\n"
                 f"Max Growth Factor: {max_temporal_scale:.2f}x")
    
    fig.text(0.02, 0.02, stats_text, fontsize=10, 
            bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    # Add opacity explanation
    opacity_text = ("Opacity Scale:\n"
                   "Transparent = Low probability\n"
                   "Opaque = High probability")
    fig.text(0.98, 0.02, opacity_text, fontsize=10, 
            bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8),
            horizontalalignment='right')
    
    plt.tight_layout(rect=[0, 0.08, 1, 0.94])
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"Comprehensive visualization saved to {save_path}")
    
    plt.show()
    
    return fig

if __name__ == "__main__":
    # Load trained model
    model = HierarchicalPlantSurrogateNet()
    try:
        model.load_state_dict(torch.load(MODEL_PATH))
        print(f"Loaded trained model successfully from {MODEL_PATH}")
    except Exception as e:
        print(f"Warning: Could not load trained model from {MODEL_PATH}: {e}")
        print("Using random weights - visualization may not be meaningful")
    
    # Generate random plant parameters
    params = build_random_parameter_file("temp_params.vset")
    print(f"Generated parameters: {params}")
    
    # Create single day visualization (Day 25 - mature plant)
    print("\nCreating Day 25 plant visualization...")
    visualize_probabilistic_plant_structure(model, params, day=25, 
                                           save_path="day_25_plant_visualization.png")
    
    print("\nVisualization complete!")
