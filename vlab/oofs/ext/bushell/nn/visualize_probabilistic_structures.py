"""
Visualization tool for probabilistic plant structures generated by the hierarchical model.
Creates graphics showing all probable plant structures with opacity based on existence probabilities.
"""

import torch
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Circle
import matplotlib.patches as mpatches
from normal_hier_surrogate_nn import HierarchicalPlantSurrogateNet
from utils_nn import build_random_parameter_file

def visualize_probabilistic_plant_structure(model, params, day=25, figsize=(12, 10), 
                                          min_opacity=0.1, max_opacity=0.9, 
                                          bp_color='red', ep_color='blue',
                                          point_size=50, save_path=None):
    """
    Visualize probabilistic plant structures with opacity based on existence probabilities.
    
    Args:
        model: Trained HierarchicalPlantSurrogateNet
        params: L-system parameters (13-dimensional vector)
        day: Which growth day to visualize (0-25)
        figsize: Figure size tuple
        min_opacity: Minimum opacity for visualization
        max_opacity: Maximum opacity for high-probability points
        bp_color: Color for branch points
        ep_color: Color for end points
        point_size: Size of points in scatter plot
        save_path: Optional path to save the figure
    """
    
    model.eval()
    with torch.no_grad():
        # Prepare input
        params_tensor = torch.tensor(params, dtype=torch.float32).unsqueeze(0)
        params_norm = (params_tensor - model.input_mean) / (model.input_std + 1e-8)
        
        # Generate base plant structure
        bp_coords, bp_probs, ep_coords, ep_probs = model.structure_gen(params_norm)
        
        # Apply growth scaling for specific day
        growth_rate = np.log(10) / 25
        temporal_scale = 0.1 * np.exp(growth_rate * day)
        
        # Scale coordinates for the specified day
        bp_coords_day = bp_coords * temporal_scale
        ep_coords_day = ep_coords * temporal_scale
        
        # Convert to numpy for visualization
        bp_x = bp_coords_day[0, :, 0].cpu().numpy()
        bp_y = bp_coords_day[0, :, 1].cpu().numpy()
        bp_prob = bp_probs[0, :].cpu().numpy()
        
        ep_x = ep_coords_day[0, :, 0].cpu().numpy()
        ep_y = ep_coords_day[0, :, 1].cpu().numpy()
        ep_prob = ep_probs[0, :].cpu().numpy()
        
    # Create the visualization
    fig, ax = plt.subplots(figsize=figsize)
    
    # Scale probabilities to opacity range
    bp_opacity = min_opacity + (max_opacity - min_opacity) * bp_prob
    ep_opacity = min_opacity + (max_opacity - min_opacity) * ep_prob
    
    # Plot branch points with probability-based opacity
    for i in range(len(bp_x)):
        if bp_prob[i] > 0.01:  # Only show points with reasonable probability
            ax.scatter(bp_x[i], bp_y[i], c=bp_color, s=point_size, 
                      alpha=bp_opacity[i], marker='o', edgecolors='black', linewidths=0.5)
    
    # Plot end points with probability-based opacity
    for i in range(len(ep_x)):
        if ep_prob[i] > 0.01:  # Only show points with reasonable probability
            ax.scatter(ep_x[i], ep_y[i], c=ep_color, s=point_size, 
                      alpha=ep_opacity[i], marker='^', edgecolors='black', linewidths=0.5)
    
    # Add probability-based connections (optional - connect high probability points)
    # This creates a more plant-like structure visualization
    high_bp_indices = np.where(bp_prob > 0.3)[0]
    high_ep_indices = np.where(ep_prob > 0.3)[0]
    
    # Connect branch points to nearby end points if both have high probability
    for bp_idx in high_bp_indices:
        for ep_idx in high_ep_indices:
            distance = np.sqrt((bp_x[bp_idx] - ep_x[ep_idx])**2 + (bp_y[bp_idx] - ep_y[ep_idx])**2)
            if distance < 100:  # Reasonable connection distance
                connection_alpha = min(bp_prob[bp_idx], ep_prob[ep_idx]) * 0.5
                ax.plot([bp_x[bp_idx], ep_x[ep_idx]], [bp_y[bp_idx], ep_y[ep_idx]], 
                       'gray', alpha=connection_alpha, linewidth=1)
    
    # Customize the plot
    ax.set_xlim(0, 500 * temporal_scale)
    ax.set_ylim(0, 500 * temporal_scale)
    ax.set_xlabel('X Coordinate (pixels)', fontsize=12)
    ax.set_ylabel('Y Coordinate (pixels)', fontsize=12)
    ax.set_title(f'Probabilistic Plant Structure - Day {day}\n'
                f'Growth Scale: {temporal_scale:.2f}x, Opacity ∝ Existence Probability', 
                fontsize=14, fontweight='bold')
    
    # Add legend
    bp_legend = mpatches.Patch(color=bp_color, label='Branch Points')
    ep_legend = mpatches.Patch(color=ep_color, label='End Points')
    ax.legend(handles=[bp_legend, ep_legend], loc='upper right')
    
    # Add probability scale reference
    prob_text = (f"Opacity Scale:\n"
                f"Min: {min_opacity:.1f} (low probability)\n"
                f"Max: {max_opacity:.1f} (high probability)")
    ax.text(0.02, 0.98, prob_text, transform=ax.transAxes, 
           verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
    
    # Add statistics
    stats_text = (f"Branch Points: {np.sum(bp_prob > 0.1):.0f} visible\n"
                 f"End Points: {np.sum(ep_prob > 0.1):.0f} visible\n"
                 f"Avg BP Prob: {np.mean(bp_prob):.3f}\n"
                 f"Avg EP Prob: {np.mean(ep_prob):.3f}")
    ax.text(0.98, 0.02, stats_text, transform=ax.transAxes, 
           verticalalignment='bottom', horizontalalignment='right',
           bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"Visualization saved to {save_path}")
    
    plt.show()
    
    return fig, ax

def visualize_growth_sequence(model, params, days=[0, 5, 10, 15, 20, 25], 
                            figsize=(18, 12), save_path=None):
    """
    Create a sequence showing probabilistic plant structures across multiple growth days.
    """
    
    model.eval()
    with torch.no_grad():
        # Prepare input
        params_tensor = torch.tensor(params, dtype=torch.float32).unsqueeze(0)
        params_norm = (params_tensor - model.input_mean) / (model.input_std + 1e-8)
        
        # Generate base plant structure
        bp_coords, bp_probs, ep_coords, ep_probs = model.structure_gen(params_norm)
    
    # Create subplot grid
    fig, axes = plt.subplots(2, 3, figsize=figsize)
    axes = axes.flatten()
    
    growth_rate = np.log(10) / 25
    
    for idx, day in enumerate(days):
        ax = axes[idx]
        
        # Calculate growth scale for this day
        temporal_scale = 0.1 * np.exp(growth_rate * day)
        
        # Scale coordinates
        bp_coords_day = bp_coords * temporal_scale
        ep_coords_day = ep_coords * temporal_scale
        
        # Convert to numpy
        bp_x = bp_coords_day[0, :, 0].cpu().numpy()
        bp_y = bp_coords_day[0, :, 1].cpu().numpy()
        bp_prob = bp_probs[0, :].cpu().numpy()
        
        ep_x = ep_coords_day[0, :, 0].cpu().numpy()
        ep_y = ep_coords_day[0, :, 1].cpu().numpy()
        ep_prob = ep_probs[0, :].cpu().numpy()
        
        # Plot with probability-based opacity
        bp_opacity = 0.1 + 0.8 * bp_prob
        ep_opacity = 0.1 + 0.8 * ep_prob
        
        # Plot points
        for i in range(len(bp_x)):
            if bp_prob[i] > 0.05:
                ax.scatter(bp_x[i], bp_y[i], c='red', s=30, 
                          alpha=bp_opacity[i], marker='o')
        
        for i in range(len(ep_x)):
            if ep_prob[i] > 0.05:
                ax.scatter(ep_x[i], ep_y[i], c='blue', s=30, 
                          alpha=ep_opacity[i], marker='^')
        
        # Customize subplot
        max_coord = 500 * temporal_scale
        ax.set_xlim(0, max_coord)
        ax.set_ylim(0, max_coord)
        ax.set_title(f'Day {day}\nScale: {temporal_scale:.2f}x', fontweight='bold')
        ax.grid(True, alpha=0.3)
        
        if idx >= 3:  # Bottom row
            ax.set_xlabel('X Coordinate')
        if idx % 3 == 0:  # Left column
            ax.set_ylabel('Y Coordinate')
    
    plt.suptitle('Probabilistic Plant Growth Sequence\nOpacity ∝ Existence Probability', 
                fontsize=16, fontweight='bold')
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"Growth sequence saved to {save_path}")
    
    plt.show()
    
    return fig, axes

def create_probability_heatmap(model, params, day=25, grid_resolution=100, figsize=(10, 8)):
    """
    Create a heatmap showing the probability density of plant structures across space.
    """
    
    model.eval()
    with torch.no_grad():
        params_tensor = torch.tensor(params, dtype=torch.float32).unsqueeze(0)
        params_norm = (params_tensor - model.input_mean) / (model.input_std + 1e-8)
        bp_coords, bp_probs, ep_coords, ep_probs = model.structure_gen(params_norm)
        
        # Apply growth scaling
        growth_rate = np.log(10) / 25
        temporal_scale = 0.1 * np.exp(growth_rate * day)
        bp_coords_day = bp_coords * temporal_scale
        ep_coords_day = ep_coords * temporal_scale
        
        # Convert to numpy
        bp_x = bp_coords_day[0, :, 0].cpu().numpy()
        bp_y = bp_coords_day[0, :, 1].cpu().numpy()
        bp_prob = bp_probs[0, :].cpu().numpy()
        
        ep_x = ep_coords_day[0, :, 0].cpu().numpy()
        ep_y = ep_coords_day[0, :, 1].cpu().numpy()
        ep_prob = ep_probs[0, :].cpu().numpy()
    
    # Create probability density grid
    max_coord = 500 * temporal_scale
    x_grid = np.linspace(0, max_coord, grid_resolution)
    y_grid = np.linspace(0, max_coord, grid_resolution)
    X, Y = np.meshgrid(x_grid, y_grid)
    
    # Calculate probability density using Gaussian kernels
    prob_density = np.zeros_like(X)
    sigma = max_coord / 50  # Kernel width
    
    # Add branch point contributions
    for i in range(len(bp_x)):
        if bp_prob[i] > 0.01:
            dist_sq = (X - bp_x[i])**2 + (Y - bp_y[i])**2
            prob_density += bp_prob[i] * np.exp(-dist_sq / (2 * sigma**2))
    
    # Add end point contributions
    for i in range(len(ep_x)):
        if ep_prob[i] > 0.01:
            dist_sq = (X - ep_x[i])**2 + (Y - ep_y[i])**2
            prob_density += ep_prob[i] * np.exp(-dist_sq / (2 * sigma**2))
    
    # Create heatmap
    fig, ax = plt.subplots(figsize=figsize)
    im = ax.imshow(prob_density, extent=[0, max_coord, 0, max_coord], 
                   origin='lower', cmap='hot', alpha=0.8)
    
    # Overlay actual points
    for i in range(len(bp_x)):
        if bp_prob[i] > 0.1:
            ax.scatter(bp_x[i], bp_y[i], c='white', s=20, marker='o', 
                      edgecolors='black', linewidths=1)
    
    for i in range(len(ep_x)):
        if ep_prob[i] > 0.1:
            ax.scatter(ep_x[i], ep_y[i], c='cyan', s=20, marker='^', 
                      edgecolors='black', linewidths=1)
    
    plt.colorbar(im, ax=ax, label='Probability Density')
    ax.set_xlabel('X Coordinate')
    ax.set_ylabel('Y Coordinate')
    ax.set_title(f'Plant Structure Probability Density - Day {day}')
    
    plt.tight_layout()
    plt.show()
    
    return fig, ax

if __name__ == "__main__":
    # Load trained model
    model = HierarchicalPlantSurrogateNet()
    try:
        model.load_state_dict(torch.load("normal_hier_plant_surrogate_model.pt"))
        print("Loaded trained model successfully")
    except:
        print("Warning: Could not load trained model, using random weights")
    
    # Generate random plant parameters
    params = build_random_parameter_file("temp_params.vset")
    print(f"Generated parameters: {params}")
    
    # Create various visualizations
    print("\n1. Creating single day probabilistic structure visualization...")
    visualize_probabilistic_plant_structure(model, params, day=25, 
                                           save_path="probabilistic_plant_day25.png")
    
    print("\n2. Creating growth sequence visualization...")
    visualize_growth_sequence(model, params, 
                            save_path="probabilistic_plant_growth_sequence.png")
    
    print("\n3. Creating probability heatmap...")
    create_probability_heatmap(model, params, day=25)
    
    print("\nVisualization complete!")
